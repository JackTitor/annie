name: Build annie
run-name: ${{ inputs.ref && format('Manual run ({0}, {1}, {2})', inputs.ref, inputs.cargo-profile, inputs.compress-exe == 'none' && 'uncompressed' || 'compressed') }}

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      ref:
        description: Code version
        required: true
        type: string
        default: master
      cargo-profile:
        description: Cargo profile
        required: true
        type: choice
        default: release
        options:
          - release
          - release-no-lto
          - release-unoptimized
      compress-exe:
        description: Compression
        required: true
        type: choice
        default: none
        options:
          - none
          - upx

jobs:
  build:
    name: Build
    runs-on: windows-latest
    env:
      RUSTFLAGS: -C target-feature=+crt-static
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: true
      matrix:
        toolchain:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
    steps:
      - name: Process inputs
        run: |
          echo ANNIE_REF=${{ inputs.ref || github.ref }} >> $GITHUB_ENV
          echo CARGO_PROFILE=${{ inputs.cargo-profile || 'release' }} >> $GITHUB_ENV
          echo COMPRESS_EXE=${{ inputs.compress-exe || 'none' }} >> $GITHUB_ENV

      - name: Cache rustup, cargo and sccache
        uses: actions/cache@v3
        with:
          key: rustup-cargo-sccache-${{ matrix.toolchain }}
          path: |
            ~/.rustup
            ~/.cargo
            ~/.sccache

      - name: Install Rust toolchain
        run: |
          rustup install --profile minimal stable
          rustup install --profile minimal stable-${{ matrix.toolchain }}

      - name: Install workflow dependencies
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall --no-fallback sccache
          cargo quickinstall --no-fallback cargo-cache
          echo SCCACHE_DIR=$(cygpath --windows ~/.sccache) >> $GITHUB_ENV
          echo RUSTC_WRAPPER=sccache >> $GITHUB_ENV

      - name: Checkout annie
        uses: actions/checkout@v3
        with:
          ref: ${{ env.ANNIE_REF }}

      - name: Retrieve annie version information
        run: |
          echo ANNIE_SHA=$(git rev-parse ${{ env.ANNIE_REF }}) >> $GITHUB_ENV
          echo ANNIE_SEMVER=$(cat Cargo.toml | sed -rn 's/^version = "(.*?)"/\1/p') >> $GITHUB_ENV

      - name: Cache annie build artifacts
        uses: actions/cache@v3
        with:
          key: annie-build-${{ matrix.toolchain }}-${{ env.CARGO_PROFILE }}-${{ env.ANNIE_SHA }}
          restore-keys: |
            annie-build-${{ matrix.toolchain }}-${{ env.CARGO_PROFILE }}
            annie-build-${{ matrix.toolchain }}
          path: target

      - name: Build annie
        run: |
          cargo +stable-${{ matrix.toolchain }} build --profile=${{ env.CARGO_PROFILE }}
          cp target/${{ env.CARGO_PROFILE }}/annie-am.exe ~/annie-am.exe

      - name: Clean up output for CI cache
        run: |
          cargo-cache

      - name: Compress executable
        if: ${{ env.COMPRESS_EXE == 'upx' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          UPX_TAG=$(gh --repo upx/upx release list | awk '$2 == Latest {print $3}')
          gh --repo upx/upx release download --pattern 'upx-*-win64.zip' --output upx.zip $UPX_TAG
          unzip upx.zip
          upx-*/upx ~/annie-am.exe
          rm -rf upx*

      - name: Upload annie to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: annie-${{ env.ANNIE_SEMVER }}-${{ matrix.toolchain }}-${{ env.CARGO_PROFILE }}${{ env.COMPRESS_EXE != 'none' && '-compressed' || '' }}
          path: |
            ~/annie-am.exe
          retention-days: 14
